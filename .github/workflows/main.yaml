name: Continuous integration

on:
  push:
    branches:
      - master
      - '[0-9]+.[0-9]+'
    tags:
      - '*'
  pull_request:

permissions:
  contents: write
  id-token: write

env:
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    outputs:
      success: ${{ steps.success.outputs.success }}

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=ci/requirements.txt
      - run: pip install --editable=.

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files --color=always
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch; git diff --color; git reset --hard || true
        if: failure()

      - uses: actions/upload-artifact@v4
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()

      - id: success
        run: echo "::set-output name=success::true"

  main:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.9'
          - '3.10'
          - '3.11'

    outputs:
      success: ${{ steps.success.outputs.success }}

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - run: python3 -m pip install --requirement=ci/requirements.txt

      - name: Install with Poetry
        run: poetry install

      - name: Prospector
        run: |
          poetry run prospector --output-format=pylint --die-on-tool-error

      - name: Test with pytest
        run: |
          poetry run pytest tests -vv

      - id: success
        run: echo "::set-output name=success::true"

  publish:
    name: Publish
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    if: always()
    needs:
      - pre-commit
      - main

    steps:
      - run: "[[ ${{ needs.pre-commit.outputs.success }} == 'true' ]]"
      - run: "[[ ${{ needs.main.outputs.success }} == 'true' ]]"

      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=ci/requirements.txt

      - name: Init pypi
        run: |-
          echo "[pypi]" > ~/.pypirc
          echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - name: Publish
        run: tag-publish
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - run: |
          sed --in-place 's/jsonschema2md/jsonschema2md2/g' pyproject.toml
          sed --in-place 's@jsonschema2md/locales@jsonschema2md2/locales@g' pyproject.toml
          sed --in-place 's@sbrunner/jsonschema2md2@sbrunner/jsonschema2md@g' pyproject.toml
          sed --in-place 's/jsonschema2md/jsonschema2md2/g' jsonschema2md/__init__.py
          sed --in-place 's/jsonschema2md/jsonschema2md2/g' scripts/build.py
          git diff
          mv jsonschema2md jsonschema2md2
      - name: Publish
        run: tag-publish
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.HAS_SECRETS == 'HAS_SECRETS'
